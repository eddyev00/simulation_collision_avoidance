// Generated by gencpp from file yolov8_msgs/DepthResult.msg
// DO NOT EDIT!


#ifndef YOLOV8_MSGS_MESSAGE_DEPTHRESULT_H
#define YOLOV8_MSGS_MESSAGE_DEPTHRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yolov8_msgs
{
template <class ContainerAllocator>
struct DepthResult_
{
  typedef DepthResult_<ContainerAllocator> Type;

  DepthResult_()
    : depth_result()  {
    }
  DepthResult_(const ContainerAllocator& _alloc)
    : depth_result(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _depth_result_type;
  _depth_result_type depth_result;





  typedef boost::shared_ptr< ::yolov8_msgs::DepthResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolov8_msgs::DepthResult_<ContainerAllocator> const> ConstPtr;

}; // struct DepthResult_

typedef ::yolov8_msgs::DepthResult_<std::allocator<void> > DepthResult;

typedef boost::shared_ptr< ::yolov8_msgs::DepthResult > DepthResultPtr;
typedef boost::shared_ptr< ::yolov8_msgs::DepthResult const> DepthResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolov8_msgs::DepthResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolov8_msgs::DepthResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolov8_msgs::DepthResult_<ContainerAllocator1> & lhs, const ::yolov8_msgs::DepthResult_<ContainerAllocator2> & rhs)
{
  return lhs.depth_result == rhs.depth_result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolov8_msgs::DepthResult_<ContainerAllocator1> & lhs, const ::yolov8_msgs::DepthResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolov8_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolov8_msgs::DepthResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov8_msgs::DepthResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov8_msgs::DepthResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov8_msgs::DepthResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov8_msgs::DepthResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov8_msgs::DepthResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolov8_msgs::DepthResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68d8f88c522a11ab48e8159691a2eee1";
  }

  static const char* value(const ::yolov8_msgs::DepthResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68d8f88c522a11abULL;
  static const uint64_t static_value2 = 0x48e8159691a2eee1ULL;
};

template<class ContainerAllocator>
struct DataType< ::yolov8_msgs::DepthResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolov8_msgs/DepthResult";
  }

  static const char* value(const ::yolov8_msgs::DepthResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolov8_msgs::DepthResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string depth_result\n"
;
  }

  static const char* value(const ::yolov8_msgs::DepthResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolov8_msgs::DepthResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.depth_result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DepthResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolov8_msgs::DepthResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolov8_msgs::DepthResult_<ContainerAllocator>& v)
  {
    s << indent << "depth_result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.depth_result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLOV8_MSGS_MESSAGE_DEPTHRESULT_H
