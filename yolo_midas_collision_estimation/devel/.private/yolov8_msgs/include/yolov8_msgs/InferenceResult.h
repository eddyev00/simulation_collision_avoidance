// Generated by gencpp from file yolov8_msgs/InferenceResult.msg
// DO NOT EDIT!


#ifndef YOLOV8_MSGS_MESSAGE_INFERENCERESULT_H
#define YOLOV8_MSGS_MESSAGE_INFERENCERESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yolov8_msgs
{
template <class ContainerAllocator>
struct InferenceResult_
{
  typedef InferenceResult_<ContainerAllocator> Type;

  InferenceResult_()
    : class_name()
    , top(0)
    , left(0)
    , bottom(0)
    , right(0)  {
    }
  InferenceResult_(const ContainerAllocator& _alloc)
    : class_name(_alloc)
    , top(0)
    , left(0)
    , bottom(0)
    , right(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _class_name_type;
  _class_name_type class_name;

   typedef int64_t _top_type;
  _top_type top;

   typedef int64_t _left_type;
  _left_type left;

   typedef int64_t _bottom_type;
  _bottom_type bottom;

   typedef int64_t _right_type;
  _right_type right;





  typedef boost::shared_ptr< ::yolov8_msgs::InferenceResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolov8_msgs::InferenceResult_<ContainerAllocator> const> ConstPtr;

}; // struct InferenceResult_

typedef ::yolov8_msgs::InferenceResult_<std::allocator<void> > InferenceResult;

typedef boost::shared_ptr< ::yolov8_msgs::InferenceResult > InferenceResultPtr;
typedef boost::shared_ptr< ::yolov8_msgs::InferenceResult const> InferenceResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolov8_msgs::InferenceResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolov8_msgs::InferenceResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolov8_msgs::InferenceResult_<ContainerAllocator1> & lhs, const ::yolov8_msgs::InferenceResult_<ContainerAllocator2> & rhs)
{
  return lhs.class_name == rhs.class_name &&
    lhs.top == rhs.top &&
    lhs.left == rhs.left &&
    lhs.bottom == rhs.bottom &&
    lhs.right == rhs.right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolov8_msgs::InferenceResult_<ContainerAllocator1> & lhs, const ::yolov8_msgs::InferenceResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolov8_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolov8_msgs::InferenceResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov8_msgs::InferenceResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov8_msgs::InferenceResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov8_msgs::InferenceResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov8_msgs::InferenceResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov8_msgs::InferenceResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolov8_msgs::InferenceResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "953d486c7f880d6374bef7ecbdfb1210";
  }

  static const char* value(const ::yolov8_msgs::InferenceResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x953d486c7f880d63ULL;
  static const uint64_t static_value2 = 0x74bef7ecbdfb1210ULL;
};

template<class ContainerAllocator>
struct DataType< ::yolov8_msgs::InferenceResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolov8_msgs/InferenceResult";
  }

  static const char* value(const ::yolov8_msgs::InferenceResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolov8_msgs::InferenceResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string class_name\n"
"int64 top\n"
"int64 left\n"
"int64 bottom\n"
"int64 right\n"
;
  }

  static const char* value(const ::yolov8_msgs::InferenceResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolov8_msgs::InferenceResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_name);
      stream.next(m.top);
      stream.next(m.left);
      stream.next(m.bottom);
      stream.next(m.right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InferenceResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolov8_msgs::InferenceResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolov8_msgs::InferenceResult_<ContainerAllocator>& v)
  {
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name);
    s << indent << "top: ";
    Printer<int64_t>::stream(s, indent + "  ", v.top);
    s << indent << "left: ";
    Printer<int64_t>::stream(s, indent + "  ", v.left);
    s << indent << "bottom: ";
    Printer<int64_t>::stream(s, indent + "  ", v.bottom);
    s << indent << "right: ";
    Printer<int64_t>::stream(s, indent + "  ", v.right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLOV8_MSGS_MESSAGE_INFERENCERESULT_H
